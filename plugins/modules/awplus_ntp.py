#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_ntp
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_ntp
short_description: 'Manages NTP configuration of AlliedWare Plus devices'
description: 'This module manages attributes of AlliedWare Plus devices NTP configuration.'
version_added: 2.10.4
author: Darryl Alang
notes:
  - 'Tested against AlliedWare Plus AT-x930-28GTX'
options:
  config:
    description: The provided configuration.
    type: dict
    suboptions:
      server:
        description:
          - Specify the IP address of the peer or the server hostname.
        type: list
        elements: str
      source_int:
        description:
          - Specify the IP address of the NTP source interface.
        type: str
      authentication:
        description:
          - Authentication
        type: list
        elements: dict
        suboptions:
          auth_key:
            description:
              - The authentication key.
            type: str
            required: true
          key_type:
            description:
              - Hash function.
            choices:
              - md5
              - sha1
            type: str
            required: true
          key_id:
            description:
              - An identification number for the key.
            type: int
            required: true
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using merged
#
# Before state:
# -------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.2

- name: Configure a simple server
  alliedtelesis.awplus.awplus_ntp:
    config:
      server:
        - 1.2.2.3
    state: merged

# After state:
# ------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.3
# ntp server 1.2.2.2


# Using replaced
#
# Before state:
# -------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.3
# ntp server 1.2.2.2

- name: Replace device configuration with provided configuration
  alliedtelesis.awplus.awplus_ntp:
    config:
      server:
        - 1.2.2.4
    state: replaced

# After state:
# ------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.4


# Using overridden
#
# Before state:
# -------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.2

- name: Override NTP attributes
  alliedtelesis.awplus.awplus_ntp:
    config:
      server:
        - 1.2.2.3
    state: overridden

# After state:
# -------------
# awplus(config)#show running-config | include ntp
# ntp server 1.2.2.3


# Using deleted
#
# Before state:
# -------------
# awplus(config)#show running-config | include ntp
# ntp authentication-key 3 md5 mystring
# ntp server 1.2.2.2

- name: Delete NTP attributes
  alliedtelesis.awplus.awplus_ntp:
    state: deleted

# After state:
# -------------
# awplus(config)#show running-config | include ntp


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['ntp server 1.2.2.2']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.ntp.ntp import NtpArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.ntp.ntp import Ntp


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    required_if = [
        ("state", "merged", ("config",)),
        ("state", "replaced", ("config",)),
        ("state", "overridden", ("config",)),
    ]
    module = AnsibleModule(argument_spec=NtpArgs.argument_spec,
                           required_if=required_if,
                           supports_check_mode=True)

    result = Ntp(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
