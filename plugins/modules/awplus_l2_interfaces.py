#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_l2_interfaces
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_l2_interfaces
short_description: 'Manages Layer 2 interfaces configuration of AlliedWare Plus devices'
description: 'This module manages Layer 2 interfaces configuration of AlliedWare Plus devices.'
version_added: 2.10.4
author: Darryl Alang
notes:
  - 'Tested against AlliedWare Plus AT-x930-28GTX'
options:
  config:
    description: The provided configuration.
    type: list
    elements: dict
    suboptions:
      name:
        description:
          - Full name of the interface to configure, for example, port1.0.2.
        type: str
        required: True
      access:
        description:
          - Set the switching characteristics of the port to access mode.
        type: dict
        suboptions:
          vlan:
            description:
              - Change the port-based VLAN of the current port.
            type: int
            required: true
      trunk:
        description:
          - Set the switching characteristics of the port to trunk.
        type: dict
        suboptions:
          allowed_vlans:
            description:
              - Add VLANs to be trunked over this switch port.
            type: list
            elements: str
          native_vlan:
            description:
              - Configure the native VLAN used for classifying the incoming untagged packets for this port.
            type: int
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using merged

# Before state:
# -------------
#
# aw1(config-if)#show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan add 21-25,40
#  switchport trunk native vlan 20
# !
# interface port1.0.4
#  switchport
#  switchport mode access
# !

- name: Merge provided configuration with device configuration
  alliedtelesis.awplus.awplus_l2_interfaces:
    config:
      - name: port1.0.4
        access:
          vlan: 10
      - name: port1.0.3
        trunk:
          allowed_vlans: 10-20,40
          native_vlan: 15
    state: merged

# After state:
# ------------
#
# aw1(config-if)#show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan add 10-14,16-25,40
#  switchport trunk native vlan 15
# !
# interface port1.0.4
#  switchport
#  switchport mode access
#  switchport access vlan 10
# !


# Using replaced

# Before state:
# -------------
#
# aw1(config-if)#show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan 2
#  switchport trunk native vlan 3
# !
# interface port1.0.4
#  switchport
#  switchport mode access
# !

- name: Replace device configuration with provided configuration
  alliedtelesis.awplus.awplus_l2_interfaces:
    config:
      - name: port1.0.3
        trunk:
          allowed_vlans: 20-25,40
          native_vlan: 20
    state: replaced

# After state:
# -------------
#
# aw1(config-if)#show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3
#  speed 1000
#  duplex full
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan add 21-25,40
#  switchport trunk native vlan 20
# !
# interface port1.0.4
#  switchport
#  switchport mode access
# !


# Using overridden

# Before state:
# -------------
#
# aw1 show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
#  switchport access vlan 5
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 2
# !
# interface port1.0.3
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan 3,5
#  switchport trunk native vlan 1
# !
# interface port1.0.4
#  switchport
#  switchport mode access
#  switchport access vlan 10
# !

  - name: Override device configuration of all l2 interfaces with provided configuration
    alliedtelesis.awplus.awplus_l2_interfaces:
      config:
        - name: port1.0.2
          access:
            vlan: 3
      state: overridden

# After state:
# -------------
#
# aw1 show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3-1.0.4
#  switchport
#  switchport mode access
# !


# Using Deleted without any config passed
#"(NOTE: This will delete all of configured resource module attributes from each configured interface)"

# Before state:
# -------------
# aw1(config-if)#show running-config interface
# interface port1.0.1
#  switchport
#  switchport mode access
#  switchport access vlan 4
# !
# interface port1.0.2
#  switchport
#  switchport mode access
#  switchport access vlan 3
# !
# interface port1.0.3
#  switchport
#  switchport mode trunk
#  switchport trunk allowed vlan 2
#  switchport trunk native vlan 1
# !
# interface port1.0.4
#  switchport
#  switchport mode access
#  switchport access vlan 10
# !

- name: Delete all L2 interface configurations
  alliedtelesis.awplus.awplus_l2_interfaces:
    state: deleted

# After state:
# -------------
# aw1(config-if)#show running-config interface
# interface port1.0.1-1.0.4
#  switchport
#  switchport mode access
# !


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['interface port1.0.3',
           'switchport mode access',
           'switchport access vlan 4']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.l2_interfaces.l2_interfaces import L2_interfacesArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.l2_interfaces.l2_interfaces import L2_interfaces


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=L2_interfacesArgs.argument_spec,
                           supports_check_mode=True)

    result = L2_interfaces(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
