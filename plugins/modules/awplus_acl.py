#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2023 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_acl
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_acl
version_added: '2.13.6'
short_description: 'Manages the ACL configuration'
description: 'This module manages the ACL configuration of Alliedware Plus devices.'
author: "Ben Hoelker"
notes:
- Tested against AlliedWare Plus on SBx908NG.
options:
  config:
    description:
      - The provided configuration for the ACL module.
    type: list
    elements: dict
    suboptions:
      acls:
        description:
          - Configures the Lists of ACLs
        type: list
        elements: dict
        suboptions:
          aces:
            description:
              - Configures the parameters for the relevant ACL.
            type: list
            elements: dict
            suboptions:
              ace_ID:
                description:
                  - Defines the ace ID for a filter entry in an ACL.
                type: int
              protocols:
                description:
                  - Defines which protocol (IP/TCP/UDP or ICMP) the user wants to target.
                choices:
                  - tcp
                  - udp
                  - icmp
                  - ip
              action:
                description:
                  - Action to do with matched packets.
                choices:
                  - permit
                  - deny
                  - copy-to-cpu
                  - copy-to-mirror
                  - send-to-mirror
                  - send-to-cpu
              source_addr:
                description:
                  - Source address in the form of an IPv4 address.
                  - Putting 'any', will match any source IP address.
                type: str
              source_port_protocol:
                description:
                  - Defines the protocols for the source port.
                type: list
                elements: dict
                suboptions:
                  eq:
                    description:
                      - Matches port numbers that are equal to the specified port.
                    type: int
                  lt:
                    description:
                      - Matches port numbers that are less than the specified port.
                    type: int
                  gt:
                    description:
                      - Matches port numbers that are greater than the specified port.
                    type: int
                  ne:
                    description:
                      - Matches port numbers that are not equal to the specified port.
                    type: int
                  range:
                    description:
                      - Matches a range of port numbers.
                    type: list
                    elements: dict
                    suboptions:
                      start:
                        description:
                          - The starting port.
                        type: int
                      end:
                        description:
                          - The end port.
                        type: int
              destination_addr:
                description:
                  - Destination address in the form of an IPv4 address.
                  - Putting 'any', will match any destination IP address.
                type: str
              destination_port_protocol:
                description:
                  - Defines the protocols for the distination port.
                type: list
                elements: dict
                suboptions:
                  eq:
                    description:
                      - Matches port numbers that are equal to the specified port.
                    type: int
                  lt:
                    description:
                      - Matches port numbers that are less than the specified port.
                    type: int
                  gt:
                    description:
                      - Matches port numbers that are greater than the specified port.
                    type: int
                  ne:
                    description:
                      - Matches port numbers that are not equal to the specified port.
                    type: int
                  range:
                    description:
                      - Matches a range of port numbers.
                    type: list
                    suboptions:
                      start:
                        description:
                          - The starting port.
                        type: int
                      end:
                        description:
                          - The end port.
                        type: int
              ICMP_type_number:
                description:
                  - Specifies the ICMP type.
                type: int
          acl_type:
            description:
              - "Defines what mode to use: extended or standard."
            choices:
              - extended
              - standard
              - hardware
            required: True
          name:
            description:
              - defines the name of the ACL.
              - Can either be named or numbered.
            type: str
            required: True
      afi:
        description:
          - defines whether IPv4 or IPv6 is used
        choices: ["IPv4", "IPv6"]
        required: True
  state:
    description:
      - The state the configuration should be left in
    type: str
    choices:
      - merged
      - replaced
      - overridden
      - deleted
    default: merged
"""
EXAMPLES = """
# Using Merged

# Before state:
# -------------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any

- name: Merged Example
    alliedtelesis.awplus.awplus_acl:
    config:
      - acls:
        - aces:
            - source_addr: 192.182.44.0 0.0.0.255
            destination_addr: any
            action: permit
            protocols: IP
            acl_type: extended
            name: '102'
        afi: IPv4
    state: merged

#After state:
# -----------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any
#     8 permit ip 192.182.44.0 0.0.0.255 any


# Using Replaced

# Before state:
# -------------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any
#     8 permit ip 192.182.44.0 0.0.0.255 any

- name: Replaced Example
      alliedtelesis.awplus.awplus_acl:
        config:
          - acls:
            - aces:
              - source_addr: 192.182.99.0 0.0.0.255
                destination_addr: any
                action: permit
                protocols: IP
              acl_type: extended
              name: '102'
            afi: IPv4
        state:  replaced

#After state:
# -----------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any


# Using Overridden

# Before state:
# -------------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any
# Extended IP access list 2001
#     4 permit ip 192.182.99.0 0.0.0.255 any

- name: Overidden Example
      alliedtelesis.awplus.awplus_acl:
        config:
          - acls:
            - aces:
              - source_addr: 192.182.99.0 0.0.0.255
                destination_addr: any
                action: permit
                protocols: IP
              acl_type: extended
              name: '2001'
            afi: IPv4
        state:  overridden

#After state:
# -----------
#
# awplus#show access-list
# Extended IP access list 2001
#     4 permit ip 192.182.88.0 0.0.0.255 any


# Using Deleted

# Before state:
# -------------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any
# Extended IP access list 2001
#     4 permit ip 192.182.99.0 0.0.0.255 any

- name: Deleted Example
      alliedtelesis.awplus.awplus_acl:
        config:
          - acls:
            - name: '2001'
        state: deleted

#After state:
# -----------
#
# awplus#show access-list
# Extended IP access list 102
#     4 permit ip 172.144.44.0 0.0.0.255 any


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.acl.acl import AclArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.acl.acl import Acl


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=AclArgs.argument_spec,
                           supports_check_mode=True)

    result = Acl(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
