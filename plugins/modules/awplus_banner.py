#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_banner
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_banner
short_description: 'Manages banner configuration of AlliedWare Plus devices'
description: 'This module configures the banners of AlliedWare Plus devices.'
version_added: 2.10.4
author: Darryl Alang
notes:
  - 'Tested against AlliedWare Plus AT-x930-28GTX'
options:
  config:
    description: The provided configuration.
    type: list
    elements: dict
    suboptions:
      banner:
        description:
          - Set the 'Message of the Day' banner to be displayed before login or
            the banner to be displayed following a successful login.
        type: str
        choices:
        - motd
        - exec
        required: true
      text:
        description:
          - The banner text that should be displayed in the remote device running configuration.
        type: str
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - deleted
    default: merged
"""
EXAMPLES = """
# Using merged
#
# Before state:
# -------------
# aw1#show running-config | include banner
# no banner motd

- name: Configure exec banner
  alliedtelesis.awplus.awplus_banner:
    config:
      - banner: exec
        text: ansible exec banner
    state: merged

# After state:
# ------------
# aw1#show running-config bgp
# banner exec ansible exec banner
# no banner motd


# Using replaced
#
# Before state:
# -------------
# aw1#show running-config | include banner
# banner exec ansible exec banner
# banner motd ansible motd banner

- name: Replace device configuration with provided configuration
  alliedtelesis.awplus.awplus_banner:
    config:
      - banner: motd
        text: ansible motd banner 2
    state: replaced

# After state:
# ------------
# aw1#show running-config | include banner
# banner motd ansible motd banner 2


# Using deleted
#
# Before state:
# -------------
# aw1#show running-config | include banner
# banner exec ansible exec banner
# banner motd ansible motd banner

- name: Delete banner configuration
  alliedtelesis.awplus.awplus_banner:
    state: deleted

# After state:
# -------------
# aw1#show running-config bgp
# no banner motd


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['banner exec ansible exec banner',
           'no banner motd']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.banner.banner import BannerArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.banner.banner import Banner


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    required_if = [
        ("state", "merged", ("config",)),
        ("state", "replaced", ("config",)),
    ]
    module = AnsibleModule(argument_spec=BannerArgs.argument_spec,
                           required_if=required_if,
                           supports_check_mode=True)

    result = Banner(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
