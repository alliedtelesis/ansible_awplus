#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2023 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_premark_dscps
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_premark_dscps
version_added: 2.9
short_description: Manage premark DSCP maps on Allied Telesis AlliedWare Plus devices.
description: This module manages properties of premark DSCP maps on Allied Telesis AlliedWare Plus devices.
author: Tony van der Peet
notes:
- Tested against AlliedWare Plus on SBx908NG and x930.
options:
  config:
    description: A list of premark DSCP map configurations.
    type: list
    elements: dict
    suboptions:
      dscp_in:
        description:
        - DSCP of incoming packet, used to look up DSCP mapping. Valid values are 0 to 63.
        type: int
        required: True
      dscp_new:
        description:
        - The new DSCP value for matching packets. Valid values are 0 to 63, use dscp_in value to leave DSCP unchanged.
        type: int
      cos_new:
        description:
        - The new CoS value for matching packets. Valid values are 0 to 7, use 0 to leave CoS unchanged.
        type: int
      class_new:
        description:
        - The new bandwidth class for matching packets. Use green to leave bandwidth class unchanged.
        type: str
        choices:
          - green
          - yellow
          - red
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using Merged

# Before state:
# -------------
#
# awplus#show running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# !

- name: Create premark-dscp mapping for DSCP 33
  awplus_premark_dscps:
    config:
      - dscp_in: 33
        dscp_new: 34
        class_new: red
    operation: merged

# After state:
# -------------
#
# awplus#show running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# mls qos map premark-dscp 33 to new-dscp 34
# mls qos map premark-dscp 33 to new-bandwidth-class red
# !


# Using Replaced

# Before state:
# -------------
#
# awplus#sh running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# mls qos map premark-dscp 33 to new-dscp 34
# mls qos map premark-dscp 33 to new-bandwidth-class red
# !

- name: Replace a premark-dscp map
  awplus_preamark_dscps:
    config:
      - name: 33
        dscp_new: 35
    operation: replaced

# After state:
# -------------
#
# awplus#show running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# mls qos map premark-dscp 33 to new-dscp 35
# !


# Using Overridden

# Before state:
# -------------
#
# awplus#sh running-config | begin premark-dscps
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# mls qos map premark-dscp 33 to new-dscp 34
# mls qos map premark-dscp 33 to new-bandwidth-class red
# !

- name: Create premark-dscps configuration
  awplus_premark_dscps:
    config:
      - dscp_in: 26
        dscp_new: 27
    operation: overridden

# After state:
# -------------
#
# awplus#sh running-config | begin premark-dscps
#
# ...skipping
# mls qos map premark-dscp 26 to new-dscp 27
# !


# Using Deleted

# Before state:
# -------------
#
# awplus#sh running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 23 to new-dscp 24
# mls qos map premark-dscp 23 to new-bandwidth-class yellow
# mls qos map premark-dscp 33 to new-dscp 34
# mls qos map premark-dscp 33 to new-bandwidth-class red
# !

- name: Delete a given premark DSCP map
  awplus_premark_dscps:
    config:
      - dscp_in: 23
    operation: deleted

# After state:
# -------------
#
# awplus#sh running-config | begin premark-dscp
#
# ...skipping
# mls qos map premark-dscp 33 to new-dscp 34
# mls qos map premark-dscp 33 to new-bandwidth-class red
# !


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.premark_dscps.premark_dscps import Premark_dscpsArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.premark_dscps.premark_dscps import Premark_dscps


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Premark_dscpsArgs.argument_spec,
                           supports_check_mode=True)

    result = Premark_dscps(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
