#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Allied Telesis
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for awplus_user
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: awplus_user
short_description: 'Manages user configuration of AlliedWare Plus devices'
description: 'This module manages user configuration of AlliedWare Plus devices.'
version_added: 2.10.4
author: Darryl Alang
notes:
  - 'Tested against AlliedWare Plus AT-x930-28GTX'
  - Runs may not be idempotent as passwords are not included in fact gathering.
options:
  config:
    description: The provided configuration.
    type: list
    elements: dict
    suboptions:
      name:
        description:
          - The login name for the user. Do not use punctuation marks
            such as single quotes (‘ ‘), double quotes (“ “), or colons (:) with the user login name.
        type: str
        required: True
      configured_password:
        description:
          - The password that the user must enter when logging in. Can be up to 32 characters in length.
          - Mutually exclusive with I(hashed_password).
      hashed_password:
        description:
          - The password as a string that has already been encrypted.
          - Mutually exclusive with I(configured_password).
        type: str
      privilege:
        description:
          - The user’s privilege level. This argument accepts integer values in the range of 1 to 15
            with privilege level 15 having full access to all commands.
        type: int
  state:
    description:
    - The state the configuration should be left in
    - Note that I(state=deleted) and I(state=overridden) will not delete the default user B(manager) or
      will create it if it does not exist.
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using merged

# Before state:
# -------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF

- name: Merge provided configuration with device configuration
  alliedtelesis.awplus.awlus_user:
    config:
      - name: guk
        configured_password: knj94
        privilege: 13
    state: merged

# After state:
# ------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF
# username guk privilege 13 password 8 $1$bJo84D$TR34MDYn4m!tE&LiF3g0ESoN


# Using replaced

# Before state:
# -------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF
# username guk privilege 13 password 8 $1$bJo84D$TR34MDYn4m!tE&LiF3g0ESoN

- name: Replace device configuration with provided configuration
  alliedtelesis.awplus.awlus_user:
    config:
      - name: guk
        configured_password: cloud
    state: replaced

# After state:
# ------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF
# username guk privilege 1 password 8 $1$bJo84D$gKJggDF4GgfgFK2VfFS23F


# Using overridden

# Before state:
# -------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF
# username guk privilege 13 password 8 $1$bJo84D$TR34MDYn4m!tE&LiF3g0ESoN
# username minnie privilege 1 password 8 $1$dV7v1SnV$Xh8G7IrfwMTIFdCHnpoFe.


- name: Override device configuration with provided configuration
  alliedtelesis.awplus.awlus_user:
    config:
      - name: manager
        configured_password: foobar
        privilege: 13
    state: overridden

# After state:
# ------------
# aw1(config)#show running-config | include username
# username manager privilege 13 password 8 $1$bJoVec4D$MiCm!CbUnG3eF5ASftd2Rf


# Using Deleted without any config passed
#"(NOTE: This will delete all of configured resource module attributes from each configured user)"
# Before state:
# -------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF
# username guk privilege 13 password 8 $1$bJo84D$TR34MDYn4m!tE&LiF3g0ESoN
# username minnie privilege 1 password 8 $1$dV7v1SnV$Xh8G7IrfwMTIFdCHnpoFe.

- name: Delete all users
  alliedtelesis.awplus.awplus_user:
    state: deleted

# After state:
# -------------
# aw1(config)#show running-config | include username
# username manager privilege 15 password 8 $1$bJoVec4D$F4gh6&bDsR4^8J8#1FhJyF


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['username guk privilege 13 password knj94']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.argspec.user.user import UserArgs
from ansible_collections.alliedtelesis.awplus.plugins.module_utils.network.awplus.config.user.user import User


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=UserArgs.argument_spec,
                           supports_check_mode=True)

    result = User(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
